// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 2.0.0 by WSRD Tencent.
// Generated from `Access.jce'
// **********************************************************************

package bdb

import (
	"errors"
	"reflect"
	m "tars/model"
	"tars/protocol/res/requestf"
	"tars/protocol/serializer"
)

type Access struct {
	s m.Servant
}

func (_obj *Access) Del(delReq BdbDelReq, delResult *BdbDelResult, _opt ...map[string]string) (_ret int32, _err error) {
	_oe := serializer.NewOutputStream()
	_oe.Write(reflect.ValueOf(&delReq), 1)
	var _status map[string]string
	var _context map[string]string
	_resp := new(requestf.ResponsePacket)
	err := _obj.s.Taf_invoke(0, "del", _oe.ToBytes(), _status, _context, _resp)
	if err != nil {
		return _ret, err
	}
	_is := serializer.NewInputStream(_resp.SBuffer)
	r0, err := _is.Read(reflect.TypeOf(_ret), 0, true)
	if err != nil {
		return _ret, err
	}
	r_2, err := _is.Read(reflect.TypeOf(*delResult), 2, true)
	if err != nil {
		return _ret, err
	}
	tmp_2 := r_2.(BdbDelResult)
	*delResult = tmp_2
	return r0.(int32), nil
}
func (_obj *Access) Insert(insertReq BdbInsertReq, insertResult *BdbInsertResult, _opt ...map[string]string) (_ret int32, _err error) {
	_oe := serializer.NewOutputStream()
	_oe.Write(reflect.ValueOf(&insertReq), 1)
	var _status map[string]string
	var _context map[string]string
	_resp := new(requestf.ResponsePacket)
	err := _obj.s.Taf_invoke(0, "insert", _oe.ToBytes(), _status, _context, _resp)
	if err != nil {
		return _ret, err
	}
	_is := serializer.NewInputStream(_resp.SBuffer)
	r0, err := _is.Read(reflect.TypeOf(_ret), 0, true)
	if err != nil {
		return _ret, err
	}
	r_2, err := _is.Read(reflect.TypeOf(*insertResult), 2, true)
	if err != nil {
		return _ret, err
	}
	tmp_2 := r_2.(BdbInsertResult)
	*insertResult = tmp_2
	return r0.(int32), nil
}
func (_obj *Access) MirrorWrite(req BdbMirrorBatchRequest, rsp *BdbMirrorBatchResponse, _opt ...map[string]string) (_ret int32, _err error) {
	_oe := serializer.NewOutputStream()
	_oe.Write(reflect.ValueOf(&req), 1)
	var _status map[string]string
	var _context map[string]string
	_resp := new(requestf.ResponsePacket)
	err := _obj.s.Taf_invoke(0, "mirrorWrite", _oe.ToBytes(), _status, _context, _resp)
	if err != nil {
		return _ret, err
	}
	_is := serializer.NewInputStream(_resp.SBuffer)
	r0, err := _is.Read(reflect.TypeOf(_ret), 0, true)
	if err != nil {
		return _ret, err
	}
	r_2, err := _is.Read(reflect.TypeOf(*rsp), 2, true)
	if err != nil {
		return _ret, err
	}
	tmp_2 := r_2.(BdbMirrorBatchResponse)
	*rsp = tmp_2
	return r0.(int32), nil
}
func (_obj *Access) Select(selectCond BdbSelectCondition, selectResult *BdbSelectResult, _opt ...map[string]string) (_ret int32, _err error) {
	_oe := serializer.NewOutputStream()
	_oe.Write(reflect.ValueOf(&selectCond), 1)
	var _status map[string]string
	var _context map[string]string
	_resp := new(requestf.ResponsePacket)
	err := _obj.s.Taf_invoke(0, "select", _oe.ToBytes(), _status, _context, _resp)
	if err != nil {
		return _ret, err
	}
	_is := serializer.NewInputStream(_resp.SBuffer)
	r0, err := _is.Read(reflect.TypeOf(_ret), 0, true)
	if err != nil {
		return _ret, err
	}
	r_2, err := _is.Read(reflect.TypeOf(*selectResult), 2, true)
	if err != nil {
		return _ret, err
	}
	tmp_2 := r_2.(BdbSelectResult)
	*selectResult = tmp_2
	return r0.(int32), nil
}
func (_obj *Access) SelectRange(selectCond BdbRangeSelectCondition, selectResult *BdbRangeSelectResult, _opt ...map[string]string) (_ret int32, _err error) {
	_oe := serializer.NewOutputStream()
	_oe.Write(reflect.ValueOf(&selectCond), 1)
	var _status map[string]string
	var _context map[string]string
	_resp := new(requestf.ResponsePacket)
	err := _obj.s.Taf_invoke(0, "selectRange", _oe.ToBytes(), _status, _context, _resp)
	if err != nil {
		return _ret, err
	}
	_is := serializer.NewInputStream(_resp.SBuffer)
	r0, err := _is.Read(reflect.TypeOf(_ret), 0, true)
	if err != nil {
		return _ret, err
	}
	r_2, err := _is.Read(reflect.TypeOf(*selectResult), 2, true)
	if err != nil {
		return _ret, err
	}
	tmp_2 := r_2.(BdbRangeSelectResult)
	*selectResult = tmp_2
	return r0.(int32), nil
}
func (_obj *Access) SelectRangePrefix(selectCond BdbPrefixRangeSelectCondition, selectResult *BdbPrefixRangeSelectResult, _opt ...map[string]string) (_ret int32, _err error) {
	_oe := serializer.NewOutputStream()
	_oe.Write(reflect.ValueOf(&selectCond), 1)
	var _status map[string]string
	var _context map[string]string
	_resp := new(requestf.ResponsePacket)
	err := _obj.s.Taf_invoke(0, "selectRangePrefix", _oe.ToBytes(), _status, _context, _resp)
	if err != nil {
		return _ret, err
	}
	_is := serializer.NewInputStream(_resp.SBuffer)
	r0, err := _is.Read(reflect.TypeOf(_ret), 0, true)
	if err != nil {
		return _ret, err
	}
	r_2, err := _is.Read(reflect.TypeOf(*selectResult), 2, true)
	if err != nil {
		return _ret, err
	}
	tmp_2 := r_2.(BdbPrefixRangeSelectResult)
	*selectResult = tmp_2
	return r0.(int32), nil
}
func (_obj *Access) Test(_opt ...map[string]string) (_ret int32, _err error) {
	_oe := serializer.NewOutputStream()
	var _status map[string]string
	var _context map[string]string
	_resp := new(requestf.ResponsePacket)
	err := _obj.s.Taf_invoke(0, "test", _oe.ToBytes(), _status, _context, _resp)
	if err != nil {
		return _ret, err
	}
	_is := serializer.NewInputStream(_resp.SBuffer)
	r0, err := _is.Read(reflect.TypeOf(_ret), 0, true)
	if err != nil {
		return _ret, err
	}
	return r0.(int32), nil
}
func (_obj *Access) Update(updateReq BdbUpdateReq, updateResult *BdbUpdateResult, _opt ...map[string]string) (_ret int32, _err error) {
	_oe := serializer.NewOutputStream()
	_oe.Write(reflect.ValueOf(&updateReq), 1)
	var _status map[string]string
	var _context map[string]string
	_resp := new(requestf.ResponsePacket)
	err := _obj.s.Taf_invoke(0, "update", _oe.ToBytes(), _status, _context, _resp)
	if err != nil {
		return _ret, err
	}
	_is := serializer.NewInputStream(_resp.SBuffer)
	r0, err := _is.Read(reflect.TypeOf(_ret), 0, true)
	if err != nil {
		return _ret, err
	}
	r_2, err := _is.Read(reflect.TypeOf(*updateResult), 2, true)
	if err != nil {
		return _ret, err
	}
	tmp_2 := r_2.(BdbUpdateResult)
	*updateResult = tmp_2
	return r0.(int32), nil
}
func (_obj *Access) SetServant(s m.Servant) {
	_obj.s = s
}

type _impAccess interface {
	Del(delReq BdbDelReq, delResult *BdbDelResult) (int32, error)
	Insert(insertReq BdbInsertReq, insertResult *BdbInsertResult) (int32, error)
	MirrorWrite(req BdbMirrorBatchRequest, rsp *BdbMirrorBatchResponse) (int32, error)
	Select(selectCond BdbSelectCondition, selectResult *BdbSelectResult) (int32, error)
	SelectRange(selectCond BdbRangeSelectCondition, selectResult *BdbRangeSelectResult) (int32, error)
	SelectRangePrefix(selectCond BdbPrefixRangeSelectCondition, selectResult *BdbPrefixRangeSelectResult) (int32, error)
	Test() (int32, error)
	Update(updateReq BdbUpdateReq, updateResult *BdbUpdateResult) (int32, error)
}

func (_obj *Access) Dispatch(_val interface{}, req *requestf.RequestPacket, resp *requestf.ResponsePacket) (err error) {
	parms := serializer.NewInputStream(req.SBuffer)
	oe := serializer.NewOutputStream()
	_imp := _val.(_impAccess)
	switch req.SFuncName {
	case "del":
		var p_0 BdbDelReq
		t_0, err := parms.Read(reflect.TypeOf(p_0), 1, true)
		if err != nil {
			return err
		}
		var o_1 BdbDelResult
		_ret, err := _imp.Del(t_0.(BdbDelReq), &o_1)
		if err != nil {
			return err
		}
		oe.Write(reflect.ValueOf(&_ret), 0)
		oe.Write(reflect.ValueOf(&o_1), 2)
	case "insert":
		var p_0 BdbInsertReq
		t_0, err := parms.Read(reflect.TypeOf(p_0), 1, true)
		if err != nil {
			return err
		}
		var o_1 BdbInsertResult
		_ret, err := _imp.Insert(t_0.(BdbInsertReq), &o_1)
		if err != nil {
			return err
		}
		oe.Write(reflect.ValueOf(&_ret), 0)
		oe.Write(reflect.ValueOf(&o_1), 2)
	case "mirrorWrite":
		var p_0 BdbMirrorBatchRequest
		t_0, err := parms.Read(reflect.TypeOf(p_0), 1, true)
		if err != nil {
			return err
		}
		var o_1 BdbMirrorBatchResponse
		_ret, err := _imp.MirrorWrite(t_0.(BdbMirrorBatchRequest), &o_1)
		if err != nil {
			return err
		}
		oe.Write(reflect.ValueOf(&_ret), 0)
		oe.Write(reflect.ValueOf(&o_1), 2)
	case "select":
		var p_0 BdbSelectCondition
		t_0, err := parms.Read(reflect.TypeOf(p_0), 1, true)
		if err != nil {
			return err
		}
		var o_1 BdbSelectResult
		_ret, err := _imp.Select(t_0.(BdbSelectCondition), &o_1)
		if err != nil {
			return err
		}
		oe.Write(reflect.ValueOf(&_ret), 0)
		oe.Write(reflect.ValueOf(&o_1), 2)
	case "selectRange":
		var p_0 BdbRangeSelectCondition
		t_0, err := parms.Read(reflect.TypeOf(p_0), 1, true)
		if err != nil {
			return err
		}
		var o_1 BdbRangeSelectResult
		_ret, err := _imp.SelectRange(t_0.(BdbRangeSelectCondition), &o_1)
		if err != nil {
			return err
		}
		oe.Write(reflect.ValueOf(&_ret), 0)
		oe.Write(reflect.ValueOf(&o_1), 2)
	case "selectRangePrefix":
		var p_0 BdbPrefixRangeSelectCondition
		t_0, err := parms.Read(reflect.TypeOf(p_0), 1, true)
		if err != nil {
			return err
		}
		var o_1 BdbPrefixRangeSelectResult
		_ret, err := _imp.SelectRangePrefix(t_0.(BdbPrefixRangeSelectCondition), &o_1)
		if err != nil {
			return err
		}
		oe.Write(reflect.ValueOf(&_ret), 0)
		oe.Write(reflect.ValueOf(&o_1), 2)
	case "test":
		_ret, err := _imp.Test()
		if err != nil {
			return err
		}
		oe.Write(reflect.ValueOf(&_ret), 0)
	case "update":
		var p_0 BdbUpdateReq
		t_0, err := parms.Read(reflect.TypeOf(p_0), 1, true)
		if err != nil {
			return err
		}
		var o_1 BdbUpdateResult
		_ret, err := _imp.Update(t_0.(BdbUpdateReq), &o_1)
		if err != nil {
			return err
		}
		oe.Write(reflect.ValueOf(&_ret), 0)
		oe.Write(reflect.ValueOf(&o_1), 2)
	default:
		return errors.New("func mismatch")
	}
	var status map[string]string
	*resp = requestf.ResponsePacket{
		IVersion:     1,
		CPacketType:  0,
		IRequestId:   req.IRequestId,
		IMessageType: 0,
		IRet:         0,
		SBuffer:      oe.ToBytes(),
		Status:       status,
		SResultDesc:  "",
		Context:      req.Context,
	}
	return nil
}
