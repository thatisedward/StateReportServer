// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 2.0.0 by WSRD Tencent.
// Generated from `BdbComm.jce'
// **********************************************************************

package bdb

import "reflect"
import "tars/protocol/serializer"

type BdbPrefixRangeSelectCondition struct {
	STableName      string
	SStartPrefix    map[string]BdbFieldValue
	SEndPrefix      map[string]BdbFieldValue
	IBorderFlag     int32
	MSelectStartKey map[string]BdbFieldValue
}

func (_obj *BdbPrefixRangeSelectCondition) resetDefault() {
	_obj.STableName = ""
	_obj.IBorderFlag = 0
}

func (_obj *BdbPrefixRangeSelectCondition) WriteTo(_os serializer.JceOutputStream) error {
	var _err error
	if _err = _os.Write(reflect.ValueOf(&_obj.STableName), 1); _err != nil {
		return _err
	}
	if _err = _os.Write(reflect.ValueOf(&_obj.SStartPrefix), 2); _err != nil {
		return _err
	}
	if _err = _os.Write(reflect.ValueOf(&_obj.SEndPrefix), 3); _err != nil {
		return _err
	}
	if _err = _os.Write(reflect.ValueOf(&_obj.IBorderFlag), 4); _err != nil {
		return _err
	}
	if _err = _os.Write(reflect.ValueOf(&_obj.MSelectStartKey), 5); _err != nil {
		return _err
	}
	return nil
}

func (_obj *BdbPrefixRangeSelectCondition) ReadFrom(_is serializer.JceInputStream) error {
	var _err error
	var _i interface{}
	_obj.resetDefault()
	_i, _err = _is.Read(reflect.TypeOf(_obj.STableName), 1, true)
	if _err != nil {
		return _err
	}
	if _i != nil {
		_obj.STableName = _i.(string)
	}
	_i, _err = _is.Read(reflect.TypeOf(_obj.SStartPrefix), 2, true)
	if _err != nil {
		return _err
	}
	if _i != nil {
		_obj.SStartPrefix = _i.(map[string]BdbFieldValue)
	}
	_i, _err = _is.Read(reflect.TypeOf(_obj.SEndPrefix), 3, true)
	if _err != nil {
		return _err
	}
	if _i != nil {
		_obj.SEndPrefix = _i.(map[string]BdbFieldValue)
	}
	_i, _err = _is.Read(reflect.TypeOf(_obj.IBorderFlag), 4, true)
	if _err != nil {
		return _err
	}
	if _i != nil {
		_obj.IBorderFlag = _i.(int32)
	}
	_i, _err = _is.Read(reflect.TypeOf(_obj.MSelectStartKey), 5, false)
	if _err != nil {
		return _err
	}
	if _i != nil {
		_obj.MSelectStartKey = _i.(map[string]BdbFieldValue)
	}
	return nil
}

func (_obj *BdbPrefixRangeSelectCondition) Display(_ds serializer.JceDisplayer) {
	_ds.Display(reflect.ValueOf(&_obj.STableName), "sTableName")
	_ds.Display(reflect.ValueOf(&_obj.SStartPrefix), "sStartPrefix")
	_ds.Display(reflect.ValueOf(&_obj.SEndPrefix), "sEndPrefix")
	_ds.Display(reflect.ValueOf(&_obj.IBorderFlag), "iBorderFlag")
	_ds.Display(reflect.ValueOf(&_obj.MSelectStartKey), "mSelectStartKey")
}

func (_obj *BdbPrefixRangeSelectCondition) WriteJson(_en serializer.JceJsonEncoder) ([]byte, error) {
	var _err error
	_err = _en.EncodeJSON(reflect.ValueOf(&_obj.STableName), "sTableName")
	if _err != nil {
		return nil, _err
	}
	_err = _en.EncodeJSON(reflect.ValueOf(&_obj.SStartPrefix), "sStartPrefix")
	if _err != nil {
		return nil, _err
	}
	_err = _en.EncodeJSON(reflect.ValueOf(&_obj.SEndPrefix), "sEndPrefix")
	if _err != nil {
		return nil, _err
	}
	_err = _en.EncodeJSON(reflect.ValueOf(&_obj.IBorderFlag), "iBorderFlag")
	if _err != nil {
		return nil, _err
	}
	_err = _en.EncodeJSON(reflect.ValueOf(&_obj.MSelectStartKey), "mSelectStartKey")
	if _err != nil {
		return nil, _err
	}
	return _en.ToBytes(), nil
}

func (_obj *BdbPrefixRangeSelectCondition) ReadJson(_de serializer.JceJsonDecoder) error {
	return _de.DecodeJSON(reflect.ValueOf(_obj))
}
