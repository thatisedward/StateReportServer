// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 2.0.0 by WSRD Tencent.
// Generated from `BdbComm.jce'
// **********************************************************************

package bdb

import "reflect"
import "tars/protocol/serializer"

type BdbUpdateReq struct {
	STableName  string
	BHasVersion bool
	VRow        []BdbRowUpdate
}

func (_obj *BdbUpdateReq) resetDefault() {
	_obj.STableName = ""
	_obj.BHasVersion = true
}

func (_obj *BdbUpdateReq) WriteTo(_os serializer.JceOutputStream) error {
	var _err error
	if _err = _os.Write(reflect.ValueOf(&_obj.STableName), 1); _err != nil {
		return _err
	}
	if _err = _os.Write(reflect.ValueOf(&_obj.BHasVersion), 2); _err != nil {
		return _err
	}
	if _err = _os.Write(reflect.ValueOf(&_obj.VRow), 3); _err != nil {
		return _err
	}
	return nil
}

func (_obj *BdbUpdateReq) ReadFrom(_is serializer.JceInputStream) error {
	var _err error
	var _i interface{}
	_obj.resetDefault()
	_i, _err = _is.Read(reflect.TypeOf(_obj.STableName), 1, true)
	if _err != nil {
		return _err
	}
	if _i != nil {
		_obj.STableName = _i.(string)
	}
	_i, _err = _is.Read(reflect.TypeOf(_obj.BHasVersion), 2, true)
	if _err != nil {
		return _err
	}
	if _i != nil {
		_obj.BHasVersion = _i.(bool)
	}
	_i, _err = _is.Read(reflect.TypeOf(_obj.VRow), 3, true)
	if _err != nil {
		return _err
	}
	if _i != nil {
		_obj.VRow = _i.([]BdbRowUpdate)
	}
	return nil
}

func (_obj *BdbUpdateReq) Display(_ds serializer.JceDisplayer) {
	_ds.Display(reflect.ValueOf(&_obj.STableName), "sTableName")
	_ds.Display(reflect.ValueOf(&_obj.BHasVersion), "bHasVersion")
	_ds.Display(reflect.ValueOf(&_obj.VRow), "vRow")
}

func (_obj *BdbUpdateReq) WriteJson(_en serializer.JceJsonEncoder) ([]byte, error) {
	var _err error
	_err = _en.EncodeJSON(reflect.ValueOf(&_obj.STableName), "sTableName")
	if _err != nil {
		return nil, _err
	}
	_err = _en.EncodeJSON(reflect.ValueOf(&_obj.BHasVersion), "bHasVersion")
	if _err != nil {
		return nil, _err
	}
	_err = _en.EncodeJSON(reflect.ValueOf(&_obj.VRow), "vRow")
	if _err != nil {
		return nil, _err
	}
	return _en.ToBytes(), nil
}

func (_obj *BdbUpdateReq) ReadJson(_de serializer.JceJsonDecoder) error {
	return _de.DecodeJSON(reflect.ValueOf(_obj))
}
