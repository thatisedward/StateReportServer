//
// This file war generated by FastJce2go 1.0
// Generated from CacheShare.jce
// Tencent.

package DCache

import (
	"fmt"
	"tars/protocol/codec"
)

type UpdateKeyValue struct {
	MainKey          string
	MpValue          map[string]UpdateFieldInfo
	Ver              int8
	Dirty            bool
	Insert           bool
	ExpireTimeSecond int32
}

func (st *UpdateKeyValue) resetDefault() {
	st.Ver = 0
	st.Dirty = true
	st.Insert = false
	st.ExpireTimeSecond = 0
}

func (st *UpdateKeyValue) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.resetDefault()

	err = _is.Read_string(&st.MainKey, 1, true)
	if err != nil {
		return err
	}

	err, have = _is.SkipTo(codec.MAP, 2, true)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&length, 0, true)
	if err != nil {
		return err
	}
	st.MpValue = make(map[string]UpdateFieldInfo)
	for i0, e0 := int32(0), length; i0 < e0; i0++ {
		var k0 string
		var v0 UpdateFieldInfo

		err = _is.Read_string(&k0, 0, false)
		if err != nil {
			return err
		}

		err = v0.ReadBlock(_is, 1, false)
		if err != nil {
			return err
		}

		st.MpValue[k0] = v0
	}

	err = _is.Read_int8(&st.Ver, 3, true)
	if err != nil {
		return err
	}

	err = _is.Read_bool(&st.Dirty, 4, true)
	if err != nil {
		return err
	}

	err = _is.Read_bool(&st.Insert, 5, true)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.ExpireTimeSecond, 6, true)
	if err != nil {
		return err
	}

	_ = length
	_ = have
	_ = ty
	return nil
}

func (st *UpdateKeyValue) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.resetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require UpdateKeyValue, but not exist. tag %d", tag)
		} else {
			return nil
		}
	}

	st.ReadFrom(_is)

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

func (st *UpdateKeyValue) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_string(st.MainKey, 1)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.MAP, 2)
	if err != nil {
		return err
	}
	err = _os.Write_int32(int32(len(st.MpValue)), 0)
	if err != nil {
		return err
	}
	for k1, v1 := range st.MpValue {

		err = _os.Write_string(k1, 0)
		if err != nil {
			return err
		}

		err = v1.WriteBlock(_os, 1)
		if err != nil {
			return err
		}
	}

	err = _os.Write_int8(st.Ver, 3)
	if err != nil {
		return err
	}

	err = _os.Write_bool(st.Dirty, 4)
	if err != nil {
		return err
	}

	err = _os.Write_bool(st.Insert, 5)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.ExpireTimeSecond, 6)
	if err != nil {
		return err
	}

	return nil
}

func (st *UpdateKeyValue) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	st.WriteTo(_os)

	err = _os.WriteHead(codec.STRUCT_END, tag)
	if err != nil {
		return err
	}
	return nil
}
